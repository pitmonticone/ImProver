decl,original_correct,new_correct_BASIC,original_score,new_score_BASIC,delta_BASIC,original_raw,new_raw_BASIC,total_time_BASIC
example : s ∩ t ∪ s ∩ u ⊆ s ∩ (t ∪ u) ,False,False,7,,,"

example : s ∩ t ∪ s ∩ u ⊆ s ∩ (t ∪ u)  := by
  rintro x (⟨xs, xt⟩ | ⟨xs, xu⟩)
  use xs
  left
  exact xt
  use xs
  right
  exact xu
","

example : s ∩ t ∪ s ∩ u ⊆ s ∩ (t ∪ u) := by
  rintro x (⟨xs, xt⟩ | ⟨xs, xu⟩)
  use xs
  cases xt with xt; [left, exact xt, right, exact xu]
",5.514386177062988
example : s \ (t ∪ u) ⊆ (s \ t) \ u ,False,False,7,,,"

example : s \ (t ∪ u) ⊆ (s \ t) \ u  := by
  rintro x ⟨xs, xntu⟩
  constructor
  use xs
  intro xt
  exact xntu (Or.inl xt)
  intro xu
  apply xntu (Or.inr xu)
","

example : s \ (t ∪ u) ⊆ (s \ t) \ u := by
  rintro x ⟨xs, xntu⟩
  constructor
  use xs
  subproof 1: x ∉ t
    intro xt
    exact xntu (Or.inl xt)
  subproof 2: x ∉ u
    intro xu
    apply xntu (Or.inr xu)
",7.236924171447754
example : s ∩ (s ∪ t) = s ,False,False,8,,,"

example : s ∩ (s ∪ t) = s  := by
  ext x
  constructor
  rintro ⟨xs, _⟩
  exact xs
  intro xs
  use xs
  left
  exact xs
","

example : s ∩ (s ∪ t) = s := by
  ext x
  constructor
  rintro ⟨xs, _⟩
  exact xs
  intro xs
  use xs
  left
  exact xs
",5.5412819385528564
example : s ∪ s ∩ t = s ,False,False,8,,,"

example : s ∪ s ∩ t = s  := by
  ext x
  constructor
  rintro (xs | ⟨xs, xt⟩)
  exact xs
  intro xs
  left
  exact xs
","

example : s ∪ s ∩ t = s := by
  ext x
  constructor
  rintro (xs | ⟨xs, xt⟩)
  exact xs
  intro xs
  left
  exact xs
",5.5127081871032715
example : s \ t ∪ t = s ∪ t ,False,False,16,,,"

example : s \ t ∪ t = s ∪ t  := by
  ext x
  constructor
  rintro (⟨xs, nxt⟩ | xt)
  left
  exact xs
  right
  exact xt
  by_cases h : x ∈ t
  intro
  right
  exact h
  rintro (xs | xt)
  left
  use xs
  right
  exact xt
","

example : s \ t ∪ t = s ∪ t := by
  ext x
  constructor
  rintro (⟨xs, nxt⟩ | xt)
  left; exact xs
  right; exact xt
  by_cases h : x ∈ t
  intro
  right; exact h
  rintro (xs | xt)
  left; use xs
  right; exact xt
",6.179702997207642
example : s \ t ∪ t \ s = (s ∪ t) \ (s ∩ t) ,False,False,28,,,"

example : s \ t ∪ t \ s = (s ∪ t) \ (s ∩ t)  := by
  ext x
  constructor
  rintro (⟨xs, xnt⟩ | ⟨xt, xns⟩)
  constructor
  left
  exact xs
  rintro ⟨_, xt⟩
  contradiction
  constructor
  right
  exact xt
  rintro ⟨xs, _⟩
  contradiction
  rintro ⟨xs | xt, nxst⟩
  left
  use xs
  intro xt
  apply nxst
  constructor
  assumption
  right
  use xt
  intro xs
  apply nxst
  constructor
  assumption
","

example : s \ t ∪ t \ s = (s ∪ t) \ (s ∩ t) := by
  ext x
  case h.mp
    rintro (⟨xs, xnt⟩ | ⟨xt, xns⟩)
    case h.mp.inl.intro
      constructor
      left
      exact xs
      rintro ⟨_, xt⟩
      contradiction
    case h.mp.inr.intro
      constructor
      right
      exact xt
      rintro ⟨xs, _⟩
      contradiction
  case h.mpr
    rintro ⟨xs | xt, nxst⟩
    case h.mpr.intro.inl
      left
      use xs
      intro xt
      apply nxst
      constructor
      assumption
    case h.mpr.intro.inr
      right
      use xt
      intro xs
      apply nxst
      constructor
      assumption
",14.956220149993896
example : { n | Nat.Prime n } ∩ { n | n > 2 } ⊆ { n | ¬Even n } ,False,False,9,,,"

example : { n | Nat.Prime n } ∩ { n | n > 2 } ⊆ { n | ¬Even n }  := by
  intro n
  simp
  intro nprime
  rcases Nat.Prime.eq_two_or_odd nprime with h | h
  rw [h]
  intro
  linarith
  rw [Nat.even_iff, h]
  norm_num
","

example : { n | Nat.Prime n } ∩ { n | n > 2 } ⊆ { n | ¬Even n } := by
  intro n
  simp only [Set.mem_inter_eq, Set.mem_set_of_eq, Nat.Prime.eq_two_or_odd]
  rintro ⟨nprime, two_lt_n⟩
  cases Nat.Prime.eq_two_or_odd nprime with eq_two odd_prime
  exfalso
  linarith
  rw Nat.even_iff
  simp [odd_prime]
",7.0232460498809814
"example (h₀ : ∀ x ∈ t, ¬Even x) (h₁ : ∀ x ∈ t, Prime x) : ∀ x ∈ s, ¬Even x ∧ Prime x ",False,False,4,,,"

example (h₀ : ∀ x ∈ t, ¬Even x) (h₁ : ∀ x ∈ t, Prime x) : ∀ x ∈ s, ¬Even x ∧ Prime x  := by
  intro x xs
  constructor
  apply h₀ x (ssubt xs)
  apply h₁ x (ssubt xs)
","

THEOREM: example (h₀ : ∀ x ∈ t, ¬Even x) (h₁ : ∀ x ∈ t, Prime x) : ∀ x ∈ s, ¬Even x ∧ Prime x := by
  intro x xs
  constructor
  apply h₀ x (ssubt xs)
  apply h₁ x (ssubt xs)
",6.060209035873413
"example (h : ∃ x ∈ s, ¬Even x ∧ Prime x) : ∃ x ∈ t, Prime x ",False,False,2,,,"

example (h : ∃ x ∈ s, ¬Even x ∧ Prime x) : ∃ x ∈ t, Prime x  := by
  rcases h with ⟨x, xs, _, px⟩
  use x, ssubt xs
","

example : s ∩ t ∪ s ∩ u ⊆ s ∩ (t ∪ u) := by
  rintro x (⟨xs, xt⟩ | ⟨xs, xu⟩); use xs; [left, right]; assumption
",21.106173753738403
"example : (s ∪ ⋂ i, A i) = ⋂ i, A i ∪ s ",False,False,19,,,"

example : (s ∪ ⋂ i, A i) = ⋂ i, A i ∪ s  := by
  ext x
  simp only [mem_union, mem_iInter]
  constructor
  rintro (xs | xI)
  intro i
  right
  exact xs
  intro i
  left
  exact xI i
  intro h
  by_cases xs : x ∈ s
  left
  exact xs
  right
  intro i
  cases h i
  assumption
  contradiction
","

example : (s ∪ ⋂ i, A i) = ⋂ i, A i ∪ s := by
  ext x
  simp only [mem_union, mem_iInter]
  constructor
  rintro (xs | xI)
  intro i
  right
  exact xs
  intro i
  left
  exact xI i
  intro h
  by_cases xs : x ∈ s
  left
  exact xs
  right
  intro i
  cases h i
  assumption
  contradiction
",7.879448175430298
"example : (⋃ p ∈ primes, { x | x ≤ p }) = univ ",False,False,5,,,"

example : (⋃ p ∈ primes, { x | x ≤ p }) = univ  := by
  apply eq_univ_of_forall
  intro x
  simp
  rcases Nat.exists_infinite_primes x with ⟨p, primep, pge⟩
  use p, pge
","

example : s ∩ t ∪ s ∩ u ⊆ s ∩ (t ∪ u) := by
  rintro x (⟨xs, xt⟩ | ⟨xs, xu⟩)
  use xs
  cases xt; [left, right]; assumption
",31.513719081878662
