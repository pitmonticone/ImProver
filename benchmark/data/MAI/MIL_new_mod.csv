repo,file,decl,method,n,metric,model,annotation,syntax_search,mathlib_search,examples,og_correct,og_errors,og_score,new_correct,new_errors,new_score,delta,og_raw,new_raw,time
Tests,Tests/MIL/C04_Sets_and_Functions/solutions/Solutions_S01_Sets.lean,example : s ∩ t ∪ s ∩ u ⊆ s ∩ (t ∪ u) ,"refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,MODULARITY,gpt-4o,True,True,True,10,True,,0,True,,0,,"
example : s ∩ t ∪ s ∩ u ⊆ s ∩ (t ∪ u)  := by
  rintro x (⟨xs, xt⟩ | ⟨xs, xu⟩)
  · use xs; left; exact xt
  . use xs; right; exact xu","
example : s ∩ t ∪ s ∩ u ⊆ s ∩ (t ∪ u)  := by
  rintro x (⟨xs, xt⟩ | ⟨xs, xu⟩)
  · use xs; left; exact xt
  . use xs; right; exact xu",85.25279998779297
Tests,Tests/MIL/C04_Sets_and_Functions/solutions/Solutions_S01_Sets.lean,example : s \ (t ∪ u) ⊆ (s \ t) \ u ,"refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,MODULARITY,gpt-4o,True,True,True,10,True,,0,True,,5,,"
example : s \ (t ∪ u) ⊆ (s \ t) \ u  := by
  rintro x ⟨xs, xntu⟩
  constructor
  use xs
  · intro xt
    exact xntu (Or.inl xt)
  intro xu
  apply xntu (Or.inr xu)","
example : s \ (t ∪ u) ⊆ (s \ t) \ u    := by
  rintro x ⟨xs, xntu⟩
  have hxs : x ∈ s := xs
  have hxnotu : x ∉ u := by
    intro xu
    exact xntu (Or.inr xu)
  have hxnot_t : x ∉ t := by
    intro xt
    exact xntu (Or.inl xt)
  have h_in_s_diff_t : x ∈ s \ t := ⟨hxs, hxnot_t⟩
  have h_in_s_diff_t_diff_u : x ∈ (s \ t) \ u := ⟨h_in_s_diff_t, hxnotu⟩
  exact h_in_s_diff_t_diff_u",156.2636787891388
Tests,Tests/MIL/C04_Sets_and_Functions/solutions/Solutions_S01_Sets.lean,example : s ∩ (s ∪ t) = s ,"refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,MODULARITY,gpt-4o,True,True,True,10,True,,0,True,,0,,"
example : s ∩ (s ∪ t) = s  := by
  ext x; constructor
  · rintro ⟨xs, _⟩
    exact xs
  . intro xs
    use xs; left; exact xs","
example : s ∩ (s ∪ t) = s  := by
  ext x; constructor
  · rintro ⟨xs, _⟩
    exact xs
  . intro xs
    use xs; left; exact xs",77.26348519325256
Tests,Tests/MIL/C04_Sets_and_Functions/solutions/Solutions_S01_Sets.lean,example : s ∪ s ∩ t = s ,"refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,MODULARITY,gpt-4o,True,True,True,10,True,,0,True,,2,,"
example : s ∪ s ∩ t = s  := by
  ext x; constructor
  · rintro (xs | ⟨xs, xt⟩) <;> exact xs
  . intro xs; left; exact xs","
example : s ∪ s ∩ t = s   := by
  ext x
  constructor
  have h₁ : x ∈ s ∪ s ∩ t → x ∈ s := by
    rintro (xs | ⟨xs, _⟩)
    . exact xs
    . exact xs
  exact h₁
  have h₂ : x ∈ s → x ∈ s ∪ s ∩ t := by
    intro xs
    left
    exact xs
  exact h₂",118.05552005767822
Tests,Tests/MIL/C04_Sets_and_Functions/solutions/Solutions_S01_Sets.lean,example : s \ t ∪ t = s ∪ t ,"refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,MODULARITY,gpt-4o,True,True,True,10,True,,0,True,,0,,"
example : s \ t ∪ t = s ∪ t  := by
  ext x; constructor
  · rintro (⟨xs, nxt⟩ | xt)
    · left
      exact xs
    . right
      exact xt
  by_cases h : x ∈ t
  · intro
    right
    exact h
  rintro (xs | xt)
  · left
    use xs
  right; exact xt","
example : s \ t ∪ t = s ∪ t  := by
  ext x; constructor
  · rintro (⟨xs, nxt⟩ | xt)
    · left
      exact xs
    . right
      exact xt
  by_cases h : x ∈ t
  · intro
    right
    exact h
  rintro (xs | xt)
  · left
    use xs
  right; exact xt",137.7134609222412
Tests,Tests/MIL/C04_Sets_and_Functions/solutions/Solutions_S01_Sets.lean,example : s \ t ∪ t \ s = (s ∪ t) \ (s ∩ t) ,"refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,MODULARITY,gpt-4o,True,True,True,10,True,,0,True,,3,,"
example : s \ t ∪ t \ s = (s ∪ t) \ (s ∩ t)  := by
  ext x; constructor
  · rintro (⟨xs, xnt⟩ | ⟨xt, xns⟩)
    · constructor
      left
      exact xs
      rintro ⟨_, xt⟩
      contradiction
    . constructor
      right
      exact xt
      rintro ⟨xs, _⟩
      contradiction
  rintro ⟨xs | xt, nxst⟩
  · left
    use xs
    intro xt
    apply nxst
    constructor <;> assumption
  . right; use xt; intro xs
    apply nxst
    constructor <;> assumption","
example : s \ t ∪ t \ s = (s ∪ t) \ (s ∩ t)   := by
  ext x
  constructor
  have in_union_not_inter : ∀ x, x ∈ s ∪ t → x ∉ s ∩ t → x ∈ (s ∪ t) \ (s ∩ t) := by
    intro x hx hnx
    exact ⟨hx, hnx⟩
  have in_diff_union : ∀ x, (x ∈ s \ t ∨ x ∈ t \ s) → x ∈ (s ∪ t) \ (s ∩ t) := by
    rintro x (⟨xs, xnt⟩ | ⟨xt, xns⟩)
    . exact in_union_not_inter x (Or.inl xs) (fun ⟨_, ht⟩ => xnt ht)
    . exact in_union_not_inter x (Or.inr xt) (fun ⟨hs, _⟩ => xns hs)
  exact in_diff_union x
  have in_diff_or : ∀ x, x ∈ (s ∪ t) \ (s ∩ t) → (x ∈ s \ t ∨ x ∈ t \ s) := by
    rintro x ⟨hx, hnx⟩
    by_cases xs : x ∈ s
    . left; exact ⟨xs, fun ht => hnx ⟨xs, ht⟩⟩
    . right; exact ⟨hx.resolve_left xs, fun hs => hnx ⟨hs, hx.resolve_left xs⟩⟩
  exact in_diff_or x",223.72035312652588
Tests,Tests/MIL/C04_Sets_and_Functions/solutions/Solutions_S01_Sets.lean,example : { n | Nat.Prime n } ∩ { n | n > 2 } ⊆ { n | ¬Even n } ,"refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,MODULARITY,gpt-4o,True,True,True,10,True,,0,True,,1,,"
example : { n | Nat.Prime n } ∩ { n | n > 2 } ⊆ { n | ¬Even n }  := by
  intro n
  simp
  intro nprime
  rcases Nat.Prime.eq_two_or_odd nprime with h | h
  · rw [h]
    intro
    linarith
  rw [Nat.even_iff, h]
  norm_num","
example : { n | Nat.Prime n } ∩ { n | n > 2 } ⊆ { n | ¬Even n }   := by
  intro n
  simp
  intro nprime
  have eq_two_or_odd := Nat.Prime.eq_two_or_odd nprime
  rcases eq_two_or_odd with h | h
  · rw [h]
    intro
    linarith
  rw [Nat.even_iff, h]
  norm_num",103.24041604995728
Tests,Tests/MIL/C04_Sets_and_Functions/solutions/Solutions_S01_Sets.lean,"example (h₀ : ∀ x ∈ t, ¬Even x) (h₁ : ∀ x ∈ t, Prime x) : ∀ x ∈ s, ¬Even x ∧ Prime x ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,MODULARITY,gpt-4o,True,True,True,10,True,,0,True,,3,,"
example (h₀ : ∀ x ∈ t, ¬Even x) (h₁ : ∀ x ∈ t, Prime x) : ∀ x ∈ s, ¬Even x ∧ Prime x  := by
  intro x xs
  constructor
  · apply h₀ x (ssubt xs)
  apply h₁ x (ssubt xs)","
example (h₀ : ∀ x ∈ t, ¬Even x) (h₁ : ∀ x ∈ t, Prime x) : ∀ x ∈ s, ¬Even x ∧ Prime x   := by
  intro x xs
  have xt : x ∈ t := ssubt xs
  have hNotEven : ¬Even x := h₀ x xt
  have hPrime : Prime x := h₁ x xt
  exact ⟨hNotEven, hPrime⟩",181.5325062274933
Tests,Tests/MIL/C04_Sets_and_Functions/solutions/Solutions_S01_Sets.lean,"example (h : ∃ x ∈ s, ¬Even x ∧ Prime x) : ∃ x ∈ t, Prime x ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,MODULARITY,gpt-4o,True,True,True,10,True,,0,True,,2,,"
example (h : ∃ x ∈ s, ¬Even x ∧ Prime x) : ∃ x ∈ t, Prime x  := by
  rcases h with ⟨x, xs, _, px⟩
  use x, ssubt xs","
example (h : ∃ x ∈ s, ¬Even x ∧ Prime x) : ∃ x ∈ t, Prime x    := by
  rcases h with ⟨x, xs, _, px⟩
  have xt : x ∈ t := ssubt xs
  have prime_in_t : ∃ y ∈ t, Prime y := ⟨x, xt, px⟩
  exact prime_in_t",115.76001286506653
Tests,Tests/MIL/C04_Sets_and_Functions/solutions/Solutions_S01_Sets.lean,"example : (s ∪ ⋂ i, A i) = ⋂ i, A i ∪ s ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,MODULARITY,gpt-4o,True,True,True,10,True,,0,True,,3,,"
example : (s ∪ ⋂ i, A i) = ⋂ i, A i ∪ s  := by
  ext x
  simp only [mem_union, mem_iInter]
  constructor
  · rintro (xs | xI)
    · intro i
      right
      exact xs
    intro i
    left
    exact xI i
  intro h
  by_cases xs : x ∈ s
  · left
    exact xs
  right
  intro i
  cases h i
  · assumption
  contradiction","
example : (s ∪ ⋂ i, A i) = ⋂ i, A i ∪ s   := by
  ext x
  simp only [mem_union, mem_iInter]
  constructor
  rintro (xs | xI)
  have : ∀ i, x ∈ A i ∨ x ∈ s := by { intro i; right; exact xs }
  exact this
  have : ∀ i, x ∈ A i ∨ x ∈ s := by { intro i; left; exact xI i }
  exact this
  intro h
  by_cases xs : x ∈ s
  left
  exact xs
  right
  have : ∀ i, x ∈ A i := by { intro i; cases h i; assumption; contradiction }
  exact this",192.03499221801758
Tests,Tests/MIL/C04_Sets_and_Functions/solutions/Solutions_S01_Sets.lean,"example : (⋃ p ∈ primes, { x | x ≤ p }) = univ ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,MODULARITY,gpt-4o,True,True,True,10,True,,0,True,,2,,"
example : (⋃ p ∈ primes, { x | x ≤ p }) = univ  := by
  apply eq_univ_of_forall
  intro x
  simp
  rcases Nat.exists_infinite_primes x with ⟨p, pge, primep⟩
  use p, primep","
example : (⋃ p ∈ primes, { x | x ≤ p }) = univ    := by
  apply eq_univ_of_forall
  intro x
  simp
  have prime_ge_x : ∃ p, x ≤ p ∧ Nat.Prime p := Nat.exists_infinite_primes x
  have mem_primes (p : ℕ) (hp : Nat.Prime p) : p ∈ primes := hp
  rcases prime_ge_x with ⟨p, pge, primep⟩
  use p
  exact ⟨mem_primes p primep, pge⟩",172.17199325561523
Tests,Tests/MIL/C04_Sets_and_Functions/solutions/Solutions_S03_The_Schroeder_Bernstein_Theorem.lean,theorem sb_right_inv {x : α} (hx : x ∉ sbSet f g) : g (invFun g x) = x ,"refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,MODULARITY,gpt-4o,True,True,True,10,True,,2,True,,2,0.0,"
theorem sb_right_inv {x : α} (hx : x ∉ sbSet f g) : g (invFun g x) = x  := by
  have : x ∈ g '' univ := by
    contrapose! hx
    rw [sbSet, mem_iUnion]
    use 0
    rw [sbAux, mem_diff]
    exact ⟨mem_univ _, hx⟩
  have : ∃ y, g y = x := by
    simp at this
    assumption
  exact invFun_eq this","
theorem sb_right_inv {x : α} (hx : x ∉ sbSet f g) : g (invFun g x) = x  := by
  have : x ∈ g '' univ := by
    contrapose! hx
    rw [sbSet, mem_iUnion]
    use 0
    rw [sbAux, mem_diff]
    exact ⟨mem_univ _, hx⟩
  have : ∃ y, g y = x := by
    simp at this
    assumption
  exact invFun_eq this",90.4200131893158
Tests,Tests/MIL/C04_Sets_and_Functions/solutions/Solutions_S03_The_Schroeder_Bernstein_Theorem.lean,theorem sb_injective (hf : Injective f) : Injective (sbFun f g) ,"refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,MODULARITY,gpt-4o,True,True,True,10,True,,2,True,,2,0.0,"
theorem sb_injective (hf : Injective f) : Injective (sbFun f g)  := by
  set A := sbSet f g with A_def
  set h := sbFun f g with h_def
  intro x₁ x₂
  intro (hxeq : h x₁ = h x₂)
  show x₁ = x₂
  simp only [h_def, sbFun, ← A_def] at hxeq
  by_cases xA : x₁ ∈ A ∨ x₂ ∈ A
  · wlog x₁A : x₁ ∈ A generalizing x₁ x₂ hxeq xA
    · symm
      apply this hxeq.symm xA.symm (xA.resolve_left x₁A)
    have x₂A : x₂ ∈ A := by
      apply _root_.not_imp_self.mp
      intro (x₂nA : x₂ ∉ A)
      rw [if_pos x₁A, if_neg x₂nA] at hxeq
      rw [A_def, sbSet, mem_iUnion] at x₁A
      have x₂eq : x₂ = g (f x₁) := by
        rw [hxeq, sb_right_inv f g x₂nA]
      rcases x₁A with ⟨n, hn⟩
      rw [A_def, sbSet, mem_iUnion]
      use n + 1
      simp [sbAux]
      exact ⟨x₁, hn, x₂eq.symm⟩
    rw [if_pos x₁A, if_pos x₂A] at hxeq
    exact hf hxeq
  push_neg  at xA
  rw [if_neg xA.1, if_neg xA.2] at hxeq
  rw [← sb_right_inv f g xA.1, hxeq, sb_right_inv f g xA.2]","
theorem sb_injective (hf : Injective f) : Injective (sbFun f g)  := by
  set A := sbSet f g with A_def
  set h := sbFun f g with h_def
  intro x₁ x₂
  intro (hxeq : h x₁ = h x₂)
  show x₁ = x₂
  simp only [h_def, sbFun, ← A_def] at hxeq
  by_cases xA : x₁ ∈ A ∨ x₂ ∈ A
  · wlog x₁A : x₁ ∈ A generalizing x₁ x₂ hxeq xA
    · symm
      apply this hxeq.symm xA.symm (xA.resolve_left x₁A)
    have x₂A : x₂ ∈ A := by
      apply _root_.not_imp_self.mp
      intro (x₂nA : x₂ ∉ A)
      rw [if_pos x₁A, if_neg x₂nA] at hxeq
      rw [A_def, sbSet, mem_iUnion] at x₁A
      have x₂eq : x₂ = g (f x₁) := by
        rw [hxeq, sb_right_inv f g x₂nA]
      rcases x₁A with ⟨n, hn⟩
      rw [A_def, sbSet, mem_iUnion]
      use n + 1
      simp [sbAux]
      exact ⟨x₁, hn, x₂eq.symm⟩
    rw [if_pos x₁A, if_pos x₂A] at hxeq
    exact hf hxeq
  push_neg  at xA
  rw [if_neg xA.1, if_neg xA.2] at hxeq
  rw [← sb_right_inv f g xA.1, hxeq, sb_right_inv f g xA.2]",96.76688623428345
Tests,Tests/MIL/C04_Sets_and_Functions/solutions/Solutions_S03_The_Schroeder_Bernstein_Theorem.lean,theorem sb_surjective (hg : Injective g) : Surjective (sbFun f g) ,"refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,MODULARITY,gpt-4o,True,True,True,10,True,,1,True,,2,1.0,"
theorem sb_surjective (hg : Injective g) : Surjective (sbFun f g)  := by
  set A := sbSet f g with A_def
  set h := sbFun f g with h_def
  intro y
  by_cases gyA : g y ∈ A
  · rw [A_def, sbSet, mem_iUnion] at gyA
    rcases gyA with ⟨n, hn⟩
    rcases n with _ | n
    · simp [sbAux] at hn
    simp [sbAux] at hn
    rcases hn with ⟨x, xmem, hx⟩
    use x
    have : x ∈ A := by
      rw [A_def, sbSet, mem_iUnion]
      exact ⟨n, xmem⟩
    simp only [h_def, sbFun, if_pos this]
    exact hg hx
  use g y
  simp only [h_def, sbFun, if_neg gyA]
  apply leftInverse_invFun hg","
theorem sb_surjective (hg : Injective g) : Surjective (sbFun f g)   := by
  set A := sbSet f g with A_def
  set h := sbFun f g with h_def
  intro y
  by_cases gyA : g y ∈ A
  have gyA_mem : ∃ n, g y ∈ sbAux f g n := by { rw [A_def, sbSet, mem_iUnion] at gyA; exact gyA }
  rcases gyA_mem with ⟨n, hn⟩
  rcases n with _ | n
  simp [sbAux] at hn
  simp [sbAux] at hn
  rcases hn with ⟨x, xmem, hx⟩
  use x
  have x_in_A : x ∈ A := by { rw [A_def, sbSet, mem_iUnion]; exact ⟨n, xmem⟩ }
  simp only [h_def, sbFun, if_pos x_in_A]
  exact hg hx
  use g y
  simp only [h_def, sbFun, if_neg gyA]
  apply leftInverse_invFun hg",104.76042795181274
