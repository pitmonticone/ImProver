repo,file,decl,method,n,metric,model,annotation,syntax_search,mathlib_search,examples,og_correct,og_errors,og_score,new_correct,new_errors,new_score,delta,og_raw,new_raw,time
Tests,Tests/MIL/C05_Elementary_Number_Theory/solutions/Solutions_S02_Induction_and_Recursion.lean,theorem pow_two_le_fac (n : ℕ) : 2 ^ (n - 1) ≤ fac n ,"refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,MODULARITY,gpt-4o,True,True,True,10,True,,1.1428571428571428,True,,1.2,0.05000000000000002,"
theorem pow_two_le_fac (n : ℕ) : 2 ^ (n - 1) ≤ fac n  := by
  rcases n with _ | n
  · simp [fac]
  induction' n with n ih
  · simp [fac]
  simp at *
  rw [pow_succ', fac]
  apply Nat.mul_le_mul _ ih
  repeat' apply Nat.succ_le_succ
  apply zero_le","
theorem pow_two_le_fac (n : ℕ) : 2 ^ (n - 1) ≤ fac n   := by
  rcases n with _ | n
  · simp [fac]
  induction' n with n ih
  · simp [fac]
  simp at *
  rw [pow_succ', fac]
  have h1 : 2 ^ n ≤ fac (n + 1) := ih
  have h2 : 2 * 2 ^ n ≤ 2 * fac (n + 1) := Nat.mul_le_mul_left 2 h1
  have h3 : 2 ≤ n + 2 := by apply Nat.succ_le_succ; apply Nat.succ_le_succ; apply Nat.zero_le
  have h4 : 2 * fac (n + 1) ≤ (n + 2) * fac (n + 1) := Nat.mul_le_mul_right (fac (n + 1)) h3
  exact Nat.le_trans h2 h4",112.32126498222351
Tests,Tests/MIL/C05_Elementary_Number_Theory/solutions/Solutions_S02_Induction_and_Recursion.lean,"theorem sum_sqr (n : ℕ) : ∑ i in range (n + 1), i ^ 2 = n * (n + 1) * (2 * n + 1) / 6 ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,MODULARITY,gpt-4o,True,True,True,10,True,,1.6666666666666667,True,,1.6666666666666667,0.0,"
theorem sum_sqr (n : ℕ) : ∑ i in range (n + 1), i ^ 2 = n * (n + 1) * (2 * n + 1) / 6  := by
  symm;
  apply Nat.div_eq_of_eq_mul_right (by norm_num : 0 < 6)
  induction' n with n ih
  · simp
  rw [Finset.sum_range_succ, mul_add 6, ← ih]
  ring","
theorem sum_sqr (n : ℕ) : ∑ i in range (n + 1), i ^ 2 = n * (n + 1) * (2 * n + 1) / 6  := by
  symm;
  apply Nat.div_eq_of_eq_mul_right (by norm_num : 0 < 6)
  induction' n with n ih
  · simp
  rw [Finset.sum_range_succ, mul_add 6, ← ih]
  ring",101.14624834060669
Tests,Tests/MIL/C05_Elementary_Number_Theory/solutions/Solutions_S02_Induction_and_Recursion.lean,theorem zero_add (n : MyNat) : add zero n = n ,"refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,MODULARITY,gpt-4o,True,True,True,10,True,,1.0,True,,1.0,0.0,"
theorem zero_add (n : MyNat) : add zero n = n  := by
  induction' n with n ih
  · rfl
  rw [add, ih]","
theorem zero_add (n : MyNat) : add zero n = n  := by
  induction' n with n ih
  · rfl
  rw [add, ih]",77.44356083869934
Tests,Tests/MIL/C05_Elementary_Number_Theory/solutions/Solutions_S02_Induction_and_Recursion.lean,theorem succ_add (m n : MyNat) : add (succ m) n = succ (add m n) ,"refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,MODULARITY,gpt-4o,True,True,True,10,True,,1.0,True,,1.375,0.375,"
theorem succ_add (m n : MyNat) : add (succ m) n = succ (add m n)  := by
  induction' n with n ih
  · rfl
  rw [add, ih]
  rfl","
theorem succ_add (m n : MyNat) : add (succ m) n = succ (add m n)    := by
  induction' n with n ih
  have base_case : add (succ m) zero = succ (add m zero) := rfl
  exact base_case
  have add_succ_eq : ∀ (a b : MyNat), add a (succ b) = succ (add a b) := by intro a b; rfl
  have step_1 : add (succ m) (succ n) = succ (add (succ m) n) := add_succ_eq (succ m) n
  have step_2 : succ (add (succ m) n) = succ (succ (add m n)) := by rw [ih]
  have step_3 : add (succ m) (succ n) = succ (succ (add m n)) := by rw [step_1, step_2]
  rw [add]
  exact step_3",133.53242421150208
Tests,Tests/MIL/C05_Elementary_Number_Theory/solutions/Solutions_S02_Induction_and_Recursion.lean,theorem add_comm (m n : MyNat) : add m n = add n m ,"refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,MODULARITY,gpt-4o,True,True,True,10,True,,1.0,True,,1.0,0.0,"
theorem add_comm (m n : MyNat) : add m n = add n m  := by
  induction' n with n ih
  · rw [zero_add]
    rfl
  rw [add, succ_add, ih]","
theorem add_comm (m n : MyNat) : add m n = add n m  := by
  induction' n with n ih
  · rw [zero_add]
    rfl
  rw [add, succ_add, ih]",78.99265599250793
Tests,Tests/MIL/C05_Elementary_Number_Theory/solutions/Solutions_S02_Induction_and_Recursion.lean,theorem add_assoc (m n k : MyNat) : add (add m n) k = add m (add n k) ,"refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,MODULARITY,gpt-4o,True,True,True,10,True,,1.0,True,,1.0,0.0,"
theorem add_assoc (m n k : MyNat) : add (add m n) k = add m (add n k)  := by
  induction' k with k ih
  · rfl
  rw [add, ih]
  rfl","
theorem add_assoc (m n k : MyNat) : add (add m n) k = add m (add n k)  := by
  induction' k with k ih
  · rfl
  rw [add, ih]
  rfl",77.29929494857788
Tests,Tests/MIL/C05_Elementary_Number_Theory/solutions/Solutions_S02_Induction_and_Recursion.lean,theorem mul_add (m n k : MyNat) : mul m (add n k) = add (mul m n) (mul m k) ,"refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,MODULARITY,gpt-4o,True,True,True,10,True,,1.0,True,,1.0,0.0,"
theorem mul_add (m n k : MyNat) : mul m (add n k) = add (mul m n) (mul m k)  := by
  induction' k with k ih
  · rfl
  rw [add, mul, mul, ih, add_assoc]","
theorem mul_add (m n k : MyNat) : mul m (add n k) = add (mul m n) (mul m k)  := by
  induction' k with k ih
  · rfl
  rw [add, mul, mul, ih, add_assoc]",80.36478018760681
Tests,Tests/MIL/C05_Elementary_Number_Theory/solutions/Solutions_S02_Induction_and_Recursion.lean,theorem zero_mul (n : MyNat) : mul zero n = zero ,"refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,MODULARITY,gpt-4o,True,True,True,10,True,,1.0,True,,1.0,0.0,"
theorem zero_mul (n : MyNat) : mul zero n = zero  := by
  induction' n with n ih
  · rfl
  rw [mul, ih]
  rfl","
theorem zero_mul (n : MyNat) : mul zero n = zero  := by
  induction' n with n ih
  · rfl
  rw [mul, ih]
  rfl",78.67979717254639
Tests,Tests/MIL/C05_Elementary_Number_Theory/solutions/Solutions_S02_Induction_and_Recursion.lean,theorem succ_mul (m n : MyNat) : mul (succ m) n = add (mul m n) n ,"refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,MODULARITY,gpt-4o,True,True,True,10,True,,1.0,True,,1.0,0.0,"
theorem succ_mul (m n : MyNat) : mul (succ m) n = add (mul m n) n  := by
  induction' n with n ih
  · rfl
  rw [mul, mul, ih, add_assoc, add_assoc, add_comm n, succ_add]
  rfl","
theorem succ_mul (m n : MyNat) : mul (succ m) n = add (mul m n) n  := by
  induction' n with n ih
  · rfl
  rw [mul, mul, ih, add_assoc, add_assoc, add_comm n, succ_add]
  rfl",83.66945791244507
Tests,Tests/MIL/C05_Elementary_Number_Theory/solutions/Solutions_S02_Induction_and_Recursion.lean,theorem mul_comm (m n : MyNat) : mul m n = mul n m ,"refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,MODULARITY,gpt-4o,True,True,True,10,True,,1.0,True,,1.0,0.0,"
theorem mul_comm (m n : MyNat) : mul m n = mul n m  := by
  induction' n with n ih
  · rw [zero_mul]
    rfl
  rw [mul, ih, succ_mul]","
theorem mul_comm (m n : MyNat) : mul m n = mul n m  := by
  induction' n with n ih
  · rw [zero_mul]
    rfl
  rw [mul, ih, succ_mul]",77.56491899490356
Tests,Tests/MIL/C05_Elementary_Number_Theory/solutions/Solutions_S01_Irrational_Roots.lean,theorem even_of_even_sqr {m : ℕ} (h : 2 ∣ m ^ 2) : 2 ∣ m ,"refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,MODULARITY,gpt-4o,True,True,True,10,True,,2.0,True,,2.0,0.0,"
theorem even_of_even_sqr {m : ℕ} (h : 2 ∣ m ^ 2) : 2 ∣ m  := by
  rw [pow_two, Nat.prime_two.dvd_mul] at h
  cases h <;> assumption","
theorem even_of_even_sqr {m : ℕ} (h : 2 ∣ m ^ 2) : 2 ∣ m  := by
  rw [pow_two, Nat.prime_two.dvd_mul] at h
  cases h <;> assumption",128.68634414672852
Tests,Tests/MIL/C05_Elementary_Number_Theory/solutions/Solutions_S01_Irrational_Roots.lean,example {m n : ℕ} (coprime_mn : m.Coprime n) : m ^ 2 ≠ 2 * n ^ 2 ,"refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,MODULARITY,gpt-4o,True,True,True,10,True,,1.4666666666666666,True,,1.4666666666666666,0.0,"
example {m n : ℕ} (coprime_mn : m.Coprime n) : m ^ 2 ≠ 2 * n ^ 2  := by
  intro sqr_eq
  have : 2 ∣ m := by
    apply even_of_even_sqr
    rw [sqr_eq]
    apply dvd_mul_right
  obtain ⟨k, meq⟩ := dvd_iff_exists_eq_mul_left.mp this
  have : 2 * (2 * k ^ 2) = 2 * n ^ 2 := by
    rw [← sqr_eq, meq]
    ring
  have : 2 * k ^ 2 = n ^ 2 :=
    (mul_right_inj' (by norm_num)).mp this
  have : 2 ∣ n := by
    apply even_of_even_sqr
    rw [← this]
    apply dvd_mul_right
  have : 2 ∣ m.gcd n := by
    apply Nat.dvd_gcd <;>
    assumption
  have : 2 ∣ 1 := by
    convert this
    symm
    exact coprime_mn
  norm_num at this","
example {m n : ℕ} (coprime_mn : m.Coprime n) : m ^ 2 ≠ 2 * n ^ 2  := by
  intro sqr_eq
  have : 2 ∣ m := by
    apply even_of_even_sqr
    rw [sqr_eq]
    apply dvd_mul_right
  obtain ⟨k, meq⟩ := dvd_iff_exists_eq_mul_left.mp this
  have : 2 * (2 * k ^ 2) = 2 * n ^ 2 := by
    rw [← sqr_eq, meq]
    ring
  have : 2 * k ^ 2 = n ^ 2 :=
    (mul_right_inj' (by norm_num)).mp this
  have : 2 ∣ n := by
    apply even_of_even_sqr
    rw [← this]
    apply dvd_mul_right
  have : 2 ∣ m.gcd n := by
    apply Nat.dvd_gcd <;>
    assumption
  have : 2 ∣ 1 := by
    convert this
    symm
    exact coprime_mn
  norm_num at this",150.60385584831238
Tests,Tests/MIL/C05_Elementary_Number_Theory/solutions/Solutions_S01_Irrational_Roots.lean,example {m n p : ℕ} (coprime_mn : m.Coprime n) (prime_p : p.Prime) : m ^ 2 ≠ p * n ^ 2 ,"refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,MODULARITY,gpt-4o,True,True,True,10,True,,1.5555555555555556,True,,1.588235294117647,0.021008403361344463,"
example {m n p : ℕ} (coprime_mn : m.Coprime n) (prime_p : p.Prime) : m ^ 2 ≠ p * n ^ 2  := by
  intro sqr_eq
  have : p ∣ m := by
    apply prime_p.dvd_of_dvd_pow
    rw [sqr_eq]
    apply dvd_mul_right
  obtain ⟨k, meq⟩ := dvd_iff_exists_eq_mul_left.mp this
  have : p * (p * k ^ 2) = p * n ^ 2 := by
    rw [← sqr_eq, meq]
    ring
  have : p * k ^ 2 = n ^ 2 := by
    apply (mul_right_inj' _).mp this
    exact prime_p.ne_zero
  have : p ∣ n := by
    apply prime_p.dvd_of_dvd_pow
    rw [← this]
    apply dvd_mul_right
  have : p ∣ Nat.gcd m n := by apply Nat.dvd_gcd <;> assumption
  have : p ∣ 1 := by
    convert this
    symm
    exact coprime_mn
  have : 2 ≤ 1 := by
    apply prime_p.two_le.trans
    exact Nat.le_of_dvd zero_lt_one this
  norm_num at this","
example {m n p : ℕ} (coprime_mn : m.Coprime n) (prime_p : p.Prime) : m ^ 2 ≠ p * n ^ 2   := by
  intro sqr_eq
  have h_p_dvd_m : p ∣ m := by
    apply prime_p.dvd_of_dvd_pow
    rw [sqr_eq]
    apply dvd_mul_right
  obtain ⟨k, meq⟩ := dvd_iff_exists_eq_mul_left.mp h_p_dvd_m
  have h_p_squared : p * (p * k ^ 2) = p * n ^ 2 := by
    rw [← sqr_eq, meq]
    ring
  have h_p_k_squared_eq_n_squared : p * k ^ 2 = n ^ 2 := by
    apply (mul_right_inj' prime_p.ne_zero).mp h_p_squared
  have h_p_dvd_n : p ∣ n := by
    apply prime_p.dvd_of_dvd_pow
    rw [← h_p_k_squared_eq_n_squared]
    apply dvd_mul_right
  have h_p_dvd_gcd : p ∣ Nat.gcd m n := by
    apply Nat.dvd_gcd <;> assumption
  have h_p_dvd_1 : p ∣ 1 := by
    convert h_p_dvd_gcd
    symm
    exact coprime_mn
  have absurd : 2 ≤ 1 := by
    apply prime_p.two_le.trans
    exact Nat.le_of_dvd zero_lt_one h_p_dvd_1
  norm_num at absurd",174.3014588356018
Tests,Tests/MIL/C05_Elementary_Number_Theory/solutions/Solutions_S01_Irrational_Roots.lean,"theorem factorization_mul' {m n : ℕ} (mnez : m ≠ 0) (nnez : n ≠ 0) (p : ℕ) :
    (m * n).factorization p = m.factorization p + n.factorization p ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,MODULARITY,gpt-4o,True,True,True,10,True,,0.0,True,,2.0,,"
theorem factorization_mul' {m n : ℕ} (mnez : m ≠ 0) (nnez : n ≠ 0) (p : ℕ) :
    (m * n).factorization p = m.factorization p + n.factorization p  := by
  rw [Nat.factorization_mul mnez nnez]
  rfl","
theorem factorization_mul' {m n : ℕ} (mnez : m ≠ 0) (nnez : n ≠ 0) (p : ℕ) :
    (m * n).factorization p = m.factorization p + n.factorization p   := by
  rw [Nat.factorization_mul mnez nnez]
  have h : (m.factorization + n.factorization) p = m.factorization p + n.factorization p := by
    rfl
  exact h",147.85363459587097
Tests,Tests/MIL/C05_Elementary_Number_Theory/solutions/Solutions_S01_Irrational_Roots.lean,"theorem factorization_pow' (n k p : ℕ) :
    (n ^ k).factorization p = k * n.factorization p ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,MODULARITY,gpt-4o,True,True,True,10,True,,0.0,True,,2.0,,"
theorem factorization_pow' (n k p : ℕ) :
    (n ^ k).factorization p = k * n.factorization p  := by
  rw [Nat.factorization_pow]
  rfl","
theorem factorization_pow' (n k p : ℕ) :
    (n ^ k).factorization p = k * n.factorization p   := by
  rw [Nat.factorization_pow]
  have h : (k • n.factorization) p = k * n.factorization p := by
    rfl
  exact h",155.82595896720886
Tests,Tests/MIL/C05_Elementary_Number_Theory/solutions/Solutions_S01_Irrational_Roots.lean,"theorem Nat.Prime.factorization' {p : ℕ} (prime_p : p.Prime) :
    p.factorization p = 1 ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,MODULARITY,gpt-4o,True,True,True,10,True,,0.0,True,,1.6666666666666667,,"
theorem Nat.Prime.factorization' {p : ℕ} (prime_p : p.Prime) :
    p.factorization p = 1  := by
  rw [prime_p.factorization]
  simp","
theorem Nat.Prime.factorization' {p : ℕ} (prime_p : p.Prime) :
    p.factorization p = 1    := by
  have prime_factorization : p.factorization = Finsupp.single p 1 := by
    exact prime_p.factorization
  have single_eq_one : (Finsupp.single p 1) p = 1 := by
    simp
  have eq_factorization : p.factorization p = (Finsupp.single p 1) p := by
    rw [prime_factorization]
  exact eq_factorization.trans single_eq_one",123.48681664466858
Tests,Tests/MIL/C05_Elementary_Number_Theory/solutions/Solutions_S01_Irrational_Roots.lean,example {m n p : ℕ} (nnz : n ≠ 0) (prime_p : p.Prime) : m ^ 2 ≠ p * n ^ 2 ,"refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,MODULARITY,gpt-4o,True,True,True,10,True,,1.8,True,,1.8,0.0,"
example {m n p : ℕ} (nnz : n ≠ 0) (prime_p : p.Prime) : m ^ 2 ≠ p * n ^ 2  := by
  intro sqr_eq
  have nsqr_nez : n ^ 2 ≠ 0 := by simpa
  have eq1 : Nat.factorization (m ^ 2) p = 2 * m.factorization p := by
    rw [factorization_pow']
  have eq2 : (p * n ^ 2).factorization p = 2 * n.factorization p + 1 := by
    rw [factorization_mul' prime_p.ne_zero nsqr_nez, prime_p.factorization', factorization_pow',
      add_comm]
  have : 2 * m.factorization p % 2 = (2 * n.factorization p + 1) % 2 := by
    rw [← eq1, sqr_eq, eq2]
  rw [add_comm, Nat.add_mul_mod_self_left, Nat.mul_mod_right] at this
  norm_num at this","
example {m n p : ℕ} (nnz : n ≠ 0) (prime_p : p.Prime) : m ^ 2 ≠ p * n ^ 2  := by
  intro sqr_eq
  have nsqr_nez : n ^ 2 ≠ 0 := by simpa
  have eq1 : Nat.factorization (m ^ 2) p = 2 * m.factorization p := by
    rw [factorization_pow']
  have eq2 : (p * n ^ 2).factorization p = 2 * n.factorization p + 1 := by
    rw [factorization_mul' prime_p.ne_zero nsqr_nez, prime_p.factorization', factorization_pow',
      add_comm]
  have : 2 * m.factorization p % 2 = (2 * n.factorization p + 1) % 2 := by
    rw [← eq1, sqr_eq, eq2]
  rw [add_comm, Nat.add_mul_mod_self_left, Nat.mul_mod_right] at this
  norm_num at this",95.61528491973877
Tests,Tests/MIL/C05_Elementary_Number_Theory/solutions/Solutions_S01_Irrational_Roots.lean,"example {m n k r : ℕ} (nnz : n ≠ 0) (pow_eq : m ^ k = r * n ^ k) {p : ℕ} :
    k ∣ r.factorization p ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,MODULARITY,gpt-4o,True,True,True,10,True,,1.5714285714285714,True,,1.5714285714285714,0.0,"
example {m n k r : ℕ} (nnz : n ≠ 0) (pow_eq : m ^ k = r * n ^ k) {p : ℕ} :
    k ∣ r.factorization p  := by
  rcases r with _ | r
  · simp
  have npow_nz : n ^ k ≠ 0 := fun npowz ↦ nnz (pow_eq_zero npowz)
  have eq1 : (m ^ k).factorization p = k * m.factorization p := by
    rw [factorization_pow']
  have eq2 : ((r + 1) * n ^ k).factorization p =
      k * n.factorization p + (r + 1).factorization p := by
    rw [factorization_mul' r.succ_ne_zero npow_nz, factorization_pow', add_comm]
  have : r.succ.factorization p = k * m.factorization p - k * n.factorization p := by
    rw [← eq1, pow_eq, eq2, add_comm, Nat.add_sub_cancel]
  rw [this]
  apply Nat.dvd_sub' <;>
  apply Nat.dvd_mul_right","
example {m n k r : ℕ} (nnz : n ≠ 0) (pow_eq : m ^ k = r * n ^ k) {p : ℕ} :
    k ∣ r.factorization p  := by
  rcases r with _ | r
  · simp
  have npow_nz : n ^ k ≠ 0 := fun npowz ↦ nnz (pow_eq_zero npowz)
  have eq1 : (m ^ k).factorization p = k * m.factorization p := by
    rw [factorization_pow']
  have eq2 : ((r + 1) * n ^ k).factorization p =
      k * n.factorization p + (r + 1).factorization p := by
    rw [factorization_mul' r.succ_ne_zero npow_nz, factorization_pow', add_comm]
  have : r.succ.factorization p = k * m.factorization p - k * n.factorization p := by
    rw [← eq1, pow_eq, eq2, add_comm, Nat.add_sub_cancel]
  rw [this]
  apply Nat.dvd_sub' <;>
  apply Nat.dvd_mul_right",188.67474102973938
Tests,Tests/MIL/C10_Differential_Calculus/solutions/Solutions_S02_Differential_Calculus_in_Normed_Spaces.lean,"example {ι : Type*} [CompleteSpace E] {g : ι → E →L[𝕜] F} (h : ∀ x, ∃ C, ∀ i, ‖g i x‖ ≤ C) :
    ∃ C', ∀ i, ‖g i‖ ≤ C' ","refinement(best_of_n_n(prompt_flat), prev_data_num=1, keep_best=True)",5,MODULARITY,gpt-4o,True,True,True,10,True,,1.3333333333333333,True,,1.3333333333333333,0.0,"
example {ι : Type*} [CompleteSpace E] {g : ι → E →L[𝕜] F} (h : ∀ x, ∃ C, ∀ i, ‖g i x‖ ≤ C) :
    ∃ C', ∀ i, ‖g i‖ ≤ C'  := by
  let e : ℕ → Set E := fun n ↦ ⋂ i : ι, { x : E | ‖g i x‖ ≤ n }
  -- each of these sets is closed
  have hc : ∀ n : ℕ, IsClosed (e n) := fun i ↦
    isClosed_iInter fun i ↦ isClosed_le (g i).cont.norm continuous_const
  -- the union is the entire space; this is where we use `h`
  have hU : (⋃ n : ℕ, e n) = univ := by
    refine' eq_univ_of_forall fun x ↦ _
    rcases h x with ⟨C, hC⟩
    obtain ⟨m, hm⟩ := exists_nat_ge C
    exact ⟨e m, mem_range_self m, mem_iInter.mpr fun i ↦ le_trans (hC i) hm⟩
  /- apply the Baire category theorem to conclude that for some `m : ℕ`,
       `e m` contains some `x` -/
  obtain ⟨m : ℕ, x : E, hx : x ∈ interior (e m)⟩ := nonempty_interior_of_iUnion_of_closed hc hU
  obtain ⟨ε, ε_pos, hε : ball x ε ⊆ interior (e m)⟩ := isOpen_iff.mp isOpen_interior x hx
  obtain ⟨k : 𝕜, hk : 1 < ‖k‖⟩ := NormedField.exists_one_lt_norm 𝕜
  -- show all elements in the ball have norm bounded by `m` after applying any `g i`
  have real_norm_le : ∀ z ∈ ball x ε, ∀ (i : ι), ‖g i z‖ ≤ m := by
    intro z hz i
    replace hz := mem_iInter.mp (interior_iInter_subset _ (hε hz)) i
    apply interior_subset hz
  have εk_pos : 0 < ε / ‖k‖ := div_pos ε_pos (zero_lt_one.trans hk)
  refine' ⟨(m + m : ℕ) / (ε / ‖k‖), fun i ↦ ContinuousLinearMap.opNorm_le_of_shell ε_pos _ hk _⟩
  · exact div_nonneg (Nat.cast_nonneg _) εk_pos.le
  intro y le_y y_lt
  calc
    ‖g i y‖ = ‖g i (y + x) - g i x‖ := by rw [(g i).map_add, add_sub_cancel_right]
    _ ≤ ‖g i (y + x)‖ + ‖g i x‖ := (norm_sub_le _ _)
    _ ≤ m + m :=
      (add_le_add (real_norm_le (y + x) (by rwa [add_comm, add_mem_ball_iff_norm]) i)
        (real_norm_le x (mem_ball_self ε_pos) i))
    _ = (m + m : ℕ) := by norm_cast","
example {ι : Type*} [CompleteSpace E] {g : ι → E →L[𝕜] F} (h : ∀ x, ∃ C, ∀ i, ‖g i x‖ ≤ C) :
    ∃ C', ∀ i, ‖g i‖ ≤ C'  := by
  let e : ℕ → Set E := fun n ↦ ⋂ i : ι, { x : E | ‖g i x‖ ≤ n }
  -- each of these sets is closed
  have hc : ∀ n : ℕ, IsClosed (e n) := fun i ↦
    isClosed_iInter fun i ↦ isClosed_le (g i).cont.norm continuous_const
  -- the union is the entire space; this is where we use `h`
  have hU : (⋃ n : ℕ, e n) = univ := by
    refine' eq_univ_of_forall fun x ↦ _
    rcases h x with ⟨C, hC⟩
    obtain ⟨m, hm⟩ := exists_nat_ge C
    exact ⟨e m, mem_range_self m, mem_iInter.mpr fun i ↦ le_trans (hC i) hm⟩
  /- apply the Baire category theorem to conclude that for some `m : ℕ`,
       `e m` contains some `x` -/
  obtain ⟨m : ℕ, x : E, hx : x ∈ interior (e m)⟩ := nonempty_interior_of_iUnion_of_closed hc hU
  obtain ⟨ε, ε_pos, hε : ball x ε ⊆ interior (e m)⟩ := isOpen_iff.mp isOpen_interior x hx
  obtain ⟨k : 𝕜, hk : 1 < ‖k‖⟩ := NormedField.exists_one_lt_norm 𝕜
  -- show all elements in the ball have norm bounded by `m` after applying any `g i`
  have real_norm_le : ∀ z ∈ ball x ε, ∀ (i : ι), ‖g i z‖ ≤ m := by
    intro z hz i
    replace hz := mem_iInter.mp (interior_iInter_subset _ (hε hz)) i
    apply interior_subset hz
  have εk_pos : 0 < ε / ‖k‖ := div_pos ε_pos (zero_lt_one.trans hk)
  refine' ⟨(m + m : ℕ) / (ε / ‖k‖), fun i ↦ ContinuousLinearMap.opNorm_le_of_shell ε_pos _ hk _⟩
  · exact div_nonneg (Nat.cast_nonneg _) εk_pos.le
  intro y le_y y_lt
  calc
    ‖g i y‖ = ‖g i (y + x) - g i x‖ := by rw [(g i).map_add, add_sub_cancel_right]
    _ ≤ ‖g i (y + x)‖ + ‖g i x‖ := (norm_sub_le _ _)
    _ ≤ m + m :=
      (add_le_add (real_norm_le (y + x) (by rwa [add_comm, add_mem_ball_iff_norm]) i)
        (real_norm_le x (mem_ball_self ε_pos) i))
    _ = (m + m : ℕ) := by norm_cast",122.70784091949463
