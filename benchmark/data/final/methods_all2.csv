repo,file,decl,method,n,metric,model,annotation,syntax_search,mathlib_search,examples,og_correct,og_errors,og_score,new_correct,new_errors,new_score,delta,og_raw,new_raw,time
Tests,Tests/MIL/C03_Logic/solutions/Solutions_S05_Disjunction.lean,theorem le_abs_self (x : ℝ) : x ≤ |x| ,"refinement(prompt_flat, prev_data_num=1, keep_best=False)",5,LENGTH,gpt-4o,True,False,False,10,True,,4,False,"linarith failed to find a contradiction
case inr.a
x✝ y x : ℝ
h : 0 > x
a✝ : x > |x|
⊢ False
failed
	at:   rw [abs_of_nonneg h] <;> rw [abs_of_neg h]; linarith",,,"
theorem le_abs_self (x : ℝ) : x ≤ |x|  := by
  rcases le_or_gt 0 x with h | h
  · rw [abs_of_nonneg h]
  . rw [abs_of_neg h]
    linarith","
theorem le_abs_self (x : ℝ) : x ≤ |x|       := by
  rcases le_or_gt 0 x with h | h
  rw [abs_of_nonneg h] <;> rw [abs_of_neg h]; linarith",30.4969220161438
Tests,Tests/MIL/C03_Logic/solutions/Solutions_S05_Disjunction.lean,theorem neg_le_abs_self (x : ℝ) : -x ≤ |x| ,"refinement(prompt_flat, prev_data_num=1, keep_best=False)",5,LENGTH,gpt-4o,True,False,False,10,True,,4,False,"tactic 'rewrite' failed, did not find instance of the pattern in the target expression
  |?m.1615|
case inl
x✝ y x : ℝ
h : 0 ≤ x
⊢ -x ≤ x
	at:   rw [abs_of_nonneg h, abs_of_neg h]; linarith
application type mismatch
  abs_of_neg h
argument
  h
has type
  0 ≤ x : Prop
but is expected to have type
  ?m.1615 < 0 : Prop
	at:   rw [abs_of_nonneg h, abs_of_neg h]; linarith",,,"
theorem neg_le_abs_self (x : ℝ) : -x ≤ |x|  := by
  rcases le_or_gt 0 x with h | h
  · rw [abs_of_nonneg h]
    linarith
  . rw [abs_of_neg h]","
theorem neg_le_abs_self (x : ℝ) : -x ≤ |x|       := by
  rcases le_or_gt 0 x with h | h
  rw [abs_of_nonneg h, abs_of_neg h]; linarith",30.805926084518433
Tests,Tests/MIL/C03_Logic/solutions/Solutions_S05_Disjunction.lean,theorem abs_add (x y : ℝ) : |x + y| ≤ |x| + |y| ,"refinement(prompt_flat, prev_data_num=1, keep_best=False)",5,LENGTH,gpt-4o,True,False,False,10,True,,5,True,,5.0,0.0,"
theorem abs_add (x y : ℝ) : |x + y| ≤ |x| + |y|  := by
  rcases le_or_gt 0 (x + y) with h | h
  · rw [abs_of_nonneg h]
    linarith [le_abs_self x, le_abs_self y]
  . rw [abs_of_neg h]
    linarith [neg_le_abs_self x, neg_le_abs_self y]","
theorem abs_add (x y : ℝ) : |x + y| ≤ |x| + |y|       := by
  rcases le_or_gt 0 (x + y) with h | h
  · rw [abs_of_nonneg h]; linarith [le_abs_self x, le_abs_self y]
  · rw [abs_of_neg h]; linarith [neg_le_abs_self x, neg_le_abs_self y]",34.17757725715637
Tests,Tests/MIL/C03_Logic/solutions/Solutions_S05_Disjunction.lean,theorem lt_abs : x < |y| ↔ x < y ∨ x < -y ,"refinement(prompt_flat, prev_data_num=1, keep_best=False)",5,LENGTH,gpt-4o,True,False,False,10,True,,19,False,"application type mismatch
  absurd h h
argument
  h
has type
  x < y : Prop
but is expected to have type
  ¬x < y : Prop
	at:   rw [abs_of_neg h]; exact ⟨Or.inr, λ h' => h'.elim (λ h => absurd h h)⟩
type mismatch
  Or.elim h' id
has type
  (x < -y → x < y) → x < y : Prop
but is expected to have type
  x < y : Prop
	at:   · rw [abs_of_nonneg h]; exact ⟨Or.inl, λ h' => h'.elim id⟩",,,"
theorem lt_abs : x < |y| ↔ x < y ∨ x < -y  := by
  rcases le_or_gt 0 y with h | h
  · rw [abs_of_nonneg h]
    constructor
    · intro h'
      left
      exact h'
    . intro h'
      rcases h' with h' | h'
      · exact h'
      . linarith
  rw [abs_of_neg h]
  constructor
  · intro h'
    right
    exact h'
  . intro h'
    rcases h' with h' | h'
    · linarith
    . exact h'","
theorem lt_abs : x < |y| ↔ x < y ∨ x < -y       := by
  rcases le_or_gt 0 y with h | h
  · rw [abs_of_nonneg h]; exact ⟨Or.inl, λ h' => h'.elim id⟩
  rw [abs_of_neg h]; exact ⟨Or.inr, λ h' => h'.elim (λ h => absurd h h)⟩",34.21206974983215
Tests,Tests/MIL/C03_Logic/solutions/Solutions_S05_Disjunction.lean,theorem abs_lt : |x| < y ↔ -y < x ∧ x < y ,"refinement(prompt_flat, prev_data_num=1, keep_best=False)",5,LENGTH,gpt-4o,True,False,False,10,True,,18,True,,9.0,-0.5,"
theorem abs_lt : |x| < y ↔ -y < x ∧ x < y  := by
  rcases le_or_gt 0 x with h | h
  · rw [abs_of_nonneg h]
    constructor
    · intro h'
      constructor
      · linarith
      exact h'
    . intro h'
      rcases h' with ⟨h1, h2⟩
      exact h2
  . rw [abs_of_neg h]
    constructor
    · intro h'
      constructor
      · linarith
      . linarith
    . intro h'
      linarith","
theorem abs_lt : |x| < y ↔ -y < x ∧ x < y       := by
  rcases le_or_gt 0 x with h | h
  · rw [abs_of_nonneg h]; exact ⟨fun h' => ⟨by linarith, h'⟩, fun ⟨_, h2⟩ => h2⟩
  · rw [abs_of_neg h]; exact ⟨fun h' => ⟨by linarith, by linarith⟩, fun ⟨_, h2⟩ => by linarith⟩",35.26727890968323
Tests,Tests/MIL/C03_Logic/solutions/Solutions_S05_Disjunction.lean,"example {z : ℝ} (h : ∃ x y, z = x ^ 2 + y ^ 2 ∨ z = x ^ 2 + y ^ 2 + 1) : z ≥ 0 ","refinement(prompt_flat, prev_data_num=1, keep_best=False)",5,LENGTH,gpt-4o,True,False,False,10,True,,3,True,,3.0,0.0,"
example {z : ℝ} (h : ∃ x y, z = x ^ 2 + y ^ 2 ∨ z = x ^ 2 + y ^ 2 + 1) : z ≥ 0  := by
  rcases h with ⟨x, y, rfl | rfl⟩ <;> linarith [sq_nonneg x, sq_nonneg y]","
example {z : ℝ} (h : ∃ x y, z = x ^ 2 + y ^ 2 ∨ z = x ^ 2 + y ^ 2 + 1) : z ≥ 0       := by
  rcases h with ⟨x, y, rfl | rfl⟩ <;> linarith [sq_nonneg x, sq_nonneg y]",32.470510959625244
Tests,Tests/MIL/C03_Logic/solutions/Solutions_S05_Disjunction.lean,example {x : ℝ} (h : x ^ 2 = 1) : x = 1 ∨ x = -1 ,"refinement(prompt_flat, prev_data_num=1, keep_best=False)",5,LENGTH,gpt-4o,True,False,False,10,True,,10,False,"tactic 'rewrite' failed, equality or iff proof expected
  ?m.12020
x : ℝ
h : x ^ 2 - 1 = 0
⊢ x = 1 ∨ x = -1
	at:   rw [← sub_eq_zero, ← sub_sq_eq_sq, h] at h
unknown identifier 'sub_sq_eq_sq'
	at:   rw [← sub_eq_zero, ← sub_sq_eq_sq, h] at h",,,"
example {x : ℝ} (h : x ^ 2 = 1) : x = 1 ∨ x = -1  := by
  have h' : x ^ 2 - 1 = 0 := by rw [h, sub_self]
  have h'' : (x + 1) * (x - 1) = 0 := by
    rw [← h']
    ring
  rcases eq_zero_or_eq_zero_of_mul_eq_zero h'' with h1 | h1
  · right
    exact eq_neg_iff_add_eq_zero.mpr h1
  . left
    exact eq_of_sub_eq_zero h1","
example {x : ℝ} (h : x ^ 2 = 1) : x = 1 ∨ x = -1       := by
  rw [← sub_eq_zero, ← sub_sq_eq_sq, h] at h
  linarith",33.067286014556885
Tests,Tests/MIL/C03_Logic/solutions/Solutions_S05_Disjunction.lean,example {x y : ℝ} (h : x ^ 2 = y ^ 2) : x = y ∨ x = -y ,"refinement(prompt_flat, prev_data_num=1, keep_best=False)",5,LENGTH,gpt-4o,True,False,False,10,True,,10,False,"tactic 'rewrite' failed, did not find instance of the pattern in the target expression
  ?m.14123 - ?m.14124 = 0
x y : ℝ
h : x ^ 2 = y ^ 2
⊢ x = y ∨ x = -y
	at:   rw [← sub_eq_zero, sub_eq_zero, sub_eq_zero, h]",,,"
example {x y : ℝ} (h : x ^ 2 = y ^ 2) : x = y ∨ x = -y  := by
  have h' : x ^ 2 - y ^ 2 = 0 := by rw [h, sub_self]
  have h'' : (x + y) * (x - y) = 0 := by
    rw [← h']
    ring
  rcases eq_zero_or_eq_zero_of_mul_eq_zero h'' with h1 | h1
  · right
    exact eq_neg_iff_add_eq_zero.mpr h1
  . left
    exact eq_of_sub_eq_zero h1","
example {x y : ℝ} (h : x ^ 2 = y ^ 2) : x = y ∨ x = -y       := by
  rw [← sub_eq_zero, sub_eq_zero, sub_eq_zero, h]
  linarith",30.49280619621277
Tests,Tests/MIL/C03_Logic/solutions/Solutions_S05_Disjunction.lean,example (h : x ^ 2 = 1) : x = 1 ∨ x = -1 ,"refinement(prompt_flat, prev_data_num=1, keep_best=False)",5,LENGTH,gpt-4o,True,False,False,10,True,,10,False,"tactic 'rewrite' failed, pattern is a metavariable
  ?m.17905
from equation
  ?m.17905 = ?m.17904
R : Type u_1
inst✝¹ : CommRing R
inst✝ : IsDomain R
x y : R
h : x ^ 2 = 1
⊢ (x + 1) * (x - 1) = 0
	at:   have h' : (x + 1) * (x - 1) = 0 := by rw [←sub_eq_zero.mp h, mul_self_sub_mul_self_eq]
application type mismatch
  sub_eq_zero.mp h
argument
  h
has type
  x ^ 2 = 1 : Prop
but is expected to have type
  ?m.17904 - ?m.17905 = 0 : Prop
	at:   have h' : (x + 1) * (x - 1) = 0 := by rw [←sub_eq_zero.mp h, mul_self_sub_mul_self_eq]",,,"
example (h : x ^ 2 = 1) : x = 1 ∨ x = -1  := by
  have h' : x ^ 2 - 1 = 0 := by rw [h, sub_self]
  have h'' : (x + 1) * (x - 1) = 0 := by
    rw [← h']
    ring
  rcases eq_zero_or_eq_zero_of_mul_eq_zero h'' with h1 | h1
  · right
    exact eq_neg_iff_add_eq_zero.mpr h1
  . left
    exact eq_of_sub_eq_zero h1","
example (h : x ^ 2 = 1) : x = 1 ∨ x = -1       := by
  have h' : (x + 1) * (x - 1) = 0 := by rw [←sub_eq_zero.mp h, mul_self_sub_mul_self_eq]
  rcases eq_zero_or_eq_zero_of_mul_eq_zero h' with h1 | h1
  right; exact eq_neg_iff_add_eq_zero.mpr h1
  left; exact eq_of_sub_eq_zero h1",33.57533502578735
Tests,Tests/MIL/C03_Logic/solutions/Solutions_S05_Disjunction.lean,example (h : x ^ 2 = y ^ 2) : x = y ∨ x = -y ,"refinement(prompt_flat, prev_data_num=1, keep_best=False)",5,LENGTH,gpt-4o,True,False,False,10,True,,10,False,"tactic 'rewrite' failed, did not find instance of the pattern in the target expression
  ?a - (?b + ?c)
R : Type u_1
inst✝¹ : CommRing R
inst✝ : IsDomain R
x y : R
h : x * x + -(y * y) = 0
⊢ x = y ∨ x = -y
	at:   rw [← sub_eq_zero, sub_eq_add_neg, pow_two, pow_two, sub_add_eq_sub_sub] at h",,,"
example (h : x ^ 2 = y ^ 2) : x = y ∨ x = -y  := by
  have h' : x ^ 2 - y ^ 2 = 0 := by rw [h, sub_self]
  have h'' : (x + y) * (x - y) = 0 := by
    rw [← h']
    ring
  rcases eq_zero_or_eq_zero_of_mul_eq_zero h'' with h1 | h1
  · right
    exact eq_neg_iff_add_eq_zero.mpr h1
  . left
    exact eq_of_sub_eq_zero h1","
example (h : x ^ 2 = y ^ 2) : x = y ∨ x = -y       := by
  rw [← sub_eq_zero, sub_eq_add_neg, pow_two, pow_two, sub_add_eq_sub_sub] at h
  rcases eq_zero_or_eq_zero_of_mul_eq_zero h with h1 | h1
  right
  exact eq_neg_iff_add_eq_zero.mpr h1
  left
  exact eq_of_sub_eq_zero h1",32.81364989280701
Tests,Tests/MIL/C03_Logic/solutions/Solutions_S05_Disjunction.lean,example (P Q : Prop) : P → Q ↔ ¬P ∨ Q ,"refinement(prompt_flat, prev_data_num=1, keep_best=False)",5,LENGTH,gpt-4o,True,False,False,10,True,,12,False,"unsolved goals
case mpr
P Q : Prop
⊢ ¬P ∨ Q → P → Q
	at:   intro h; by_cases h': P; exacts [Or.inr (h h'), Or.inl h']",,,"
example (P Q : Prop) : P → Q ↔ ¬P ∨ Q  := by
  constructor
  · intro h
    by_cases h' : P
    · right
      exact h h'
    . left
      exact h'
  rintro (h | h)
  · intro h'
    exact absurd h' h
  . intro
    exact h","
example (P Q : Prop) : P → Q ↔ ¬P ∨ Q       := by
  constructor
  intro h; by_cases h': P; exacts [Or.inr (h h'), Or.inl h']
  rintro (h | h); exacts [absurd ‹P› h, h]",31.737096071243286
Tests,Tests/MIL/C03_Logic/solutions/Solutions_S02_The_Existential_Quantifier.lean,example (lbf : FnHasLb f) (lbg : FnHasLb g) : FnHasLb fun x ↦ f x + g x ,"refinement(prompt_flat, prev_data_num=1, keep_best=False)",5,LENGTH,gpt-4o,True,False,False,10,True,,5,True,,4.0,-0.2,"
example (lbf : FnHasLb f) (lbg : FnHasLb g) : FnHasLb fun x ↦ f x + g x  := by
  rcases lbf with ⟨a, lbfa⟩
  rcases lbg with ⟨b, lbgb⟩
  use a + b
  intro x
  exact add_le_add (lbfa x) (lbgb x)","
example (lbf : FnHasLb f) (lbg : FnHasLb g) : FnHasLb fun x ↦ f x + g x       := by
  rcases lbf with ⟨a, lbfa⟩
  rcases lbg with ⟨b, lbgb⟩
  use a + b
  exact fun x => add_le_add (lbfa x) (lbgb x)",25.97094702720642
Tests,Tests/MIL/C03_Logic/solutions/Solutions_S02_The_Existential_Quantifier.lean,example {c : ℝ} (ubf : FnHasUb f) (h : c ≥ 0) : FnHasUb fun x ↦ c * f x ,"refinement(prompt_flat, prev_data_num=1, keep_best=False)",5,LENGTH,gpt-4o,True,False,False,10,True,,4,True,,3.0,-0.25,"
example {c : ℝ} (ubf : FnHasUb f) (h : c ≥ 0) : FnHasUb fun x ↦ c * f x  := by
  rcases ubf with ⟨a, ubfa⟩
  use c * a
  intro x
  exact mul_le_mul_of_nonneg_left (ubfa x) h","
example {c : ℝ} (ubf : FnHasUb f) (h : c ≥ 0) : FnHasUb fun x ↦ c * f x       := by
  rcases ubf with ⟨a, ubfa⟩
  use c * a
  exact fun x => mul_le_mul_of_nonneg_left (ubfa x) h",24.71595597267151
Tests,Tests/MIL/C03_Logic/solutions/Solutions_S02_The_Existential_Quantifier.lean,example (divab : a ∣ b) (divbc : b ∣ c) : a ∣ c ,"refinement(prompt_flat, prev_data_num=1, keep_best=False)",5,LENGTH,gpt-4o,True,False,False,10,True,,4,False,"tactic 'introN' failed, insufficient number of binders
a b c : ℕ
divab : a ∣ b
divbc : b ∣ c
⊢ a ∣ c
	at:   rintro ⟨d, rfl⟩ ⟨e, rfl⟩",,,"
example (divab : a ∣ b) (divbc : b ∣ c) : a ∣ c  := by
  rcases divab with ⟨d, rfl⟩
  rcases divbc with ⟨e, rfl⟩
  use d * e; ring","
example (divab : a ∣ b) (divbc : b ∣ c) : a ∣ c       := by
  rintro ⟨d, rfl⟩ ⟨e, rfl⟩
  use d * e; ring",25.54569172859192
Tests,Tests/MIL/C03_Logic/solutions/Solutions_S02_The_Existential_Quantifier.lean,example (divab : a ∣ b) (divac : a ∣ c) : a ∣ b + c ,"refinement(prompt_flat, prev_data_num=1, keep_best=False)",5,LENGTH,gpt-4o,True,False,False,10,True,,4,True,,4.0,0.0,"
example (divab : a ∣ b) (divac : a ∣ c) : a ∣ b + c  := by
  rcases divab with ⟨d, rfl⟩
  rcases divac with ⟨e, rfl⟩
  use d + e; ring","
example (divab : a ∣ b) (divac : a ∣ c) : a ∣ b + c       := by
  rcases divab with ⟨d, rfl⟩
  rcases divac with ⟨e, rfl⟩
  use d + e; ring",24.870749950408936
Tests,Tests/MIL/C03_Logic/solutions/Solutions_S02_The_Existential_Quantifier.lean,example {c : ℝ} (h : c ≠ 0) : Surjective fun x ↦ c * x ,"refinement(prompt_flat, prev_data_num=1, keep_best=False)",5,LENGTH,gpt-4o,True,False,False,10,True,,4,True,,3.0,-0.25,"
example {c : ℝ} (h : c ≠ 0) : Surjective fun x ↦ c * x  := by
  intro x
  use x / c
  dsimp; rw [mul_div_cancel₀ _ h]","
example {c : ℝ} (h : c ≠ 0) : Surjective fun x ↦ c * x       := by
  intro x
  use x / c
  field_simp [h]",23.549522876739502
Tests,Tests/MIL/C03_Logic/solutions/Solutions_S02_The_Existential_Quantifier.lean,example {c : ℝ} (h : c ≠ 0) : Surjective fun x ↦ c * x ,"refinement(prompt_flat, prev_data_num=1, keep_best=False)",5,LENGTH,gpt-4o,True,False,False,10,True,,3,True,,3.0,0.0,"
example {c : ℝ} (h : c ≠ 0) : Surjective fun x ↦ c * x  := by
  intro x
  use x / c
  field_simp","
example {c : ℝ} (h : c ≠ 0) : Surjective fun x ↦ c * x       := by
  intro x
  use x / c
  field_simp",22.604705095291138
Tests,Tests/MIL/C03_Logic/solutions/Solutions_S02_The_Existential_Quantifier.lean,example (surjg : Surjective g) (surjf : Surjective f) : Surjective fun x ↦ g (f x) ,"refinement(prompt_flat, prev_data_num=1, keep_best=False)",5,LENGTH,gpt-4o,True,False,False,10,True,,4,True,,4.0,0.0,"
example (surjg : Surjective g) (surjf : Surjective f) : Surjective fun x ↦ g (f x)  := by
  intro z
  rcases surjg z with ⟨y, rfl⟩
  rcases surjf y with ⟨x, rfl⟩
  use x","
example (surjg : Surjective g) (surjf : Surjective f) : Surjective fun x ↦ g (f x)       := by
  intro z
  rcases surjg z with ⟨y, rfl⟩
  rcases surjf y with ⟨x, rfl⟩
  use x",25.758227109909058
